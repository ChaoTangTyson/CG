function setup()
{
	UI = {};
	UI.tabs = [];
	UI.titleLong = 'Ray Tracer';
	UI.titleShort = 'RayTracerSimple';
	UI.numFrames = 1000;
	UI.maxFPS = 24;
	UI.renderWidth = 800;
	UI.renderHeight = 400;

	UI.tabs.push(
		{
		visible: true,
		type: `x-shader/x-fragment`,
		title: `RaytracingDemoFS - GL`,
		id: `RaytracingDemoFS`,
		initialValue: `#define SOLUTION_CYLINDER_AND_PLANE
#define SOLUTION_MATERIAL
#define SOLUTION_SHADOW
#define SOLUTION_REFLECTION
#define SOLUTION_REFRACTION
#define SOLUTION_FRESNEL

// Fresnel effect indicates that the object which is under different viewing angle will have different reflection rate. Fresnel equation applied on CG can makes the material more realistic. Detailed description about Fresnel equation is stated in the Refraction and Reflection part.In this coursework,Schlick Fresnel approxiation is applied.
// reference: WIKIPEDIA, from : https://en.wikipedia.org/wiki/Fresnel_equations
// reference: The Basics of Fresnel Shading, Kyle Halladay,from : http://kylehalladay.com/blog/tutorial/2014/02/18/Fresnel-Shaders-From-The-Ground-Up.html
// reference: CG tutorial chapter seven, Nvidia, from:http://developer.download.nvidia.com/CgTutorial/cg_tutorial_chapter07.html

precision highp float;
uniform float time;

struct PointLight {
    vec3 position;
    vec3 color;
};

struct Material {
    vec3  diffuse;
    vec3  specular;
    float glossiness;
#ifdef SOLUTION_MATERIAL
	// Put the variables for reflection and refraction here
	float reflection;
	float refraction;
	float IOR; // IOR means the index of refraction of the material
#endif
};

struct Sphere {
    vec3 position;
    float radius;
    Material material;
};

struct Plane {
    vec3 normal;
    float d;
    Material material;
};

struct Cylinder {
    vec3 position;
    vec3 direction;  
    float radius;
    Material material;
};

const int lightCount = 2;
const int sphereCount = 3;
const int planeCount = 1;
const int cylinderCount = 2;

struct Scene {
    vec3 ambient;
    PointLight[lightCount] lights;
    Sphere[sphereCount] spheres;
    Plane[planeCount] planes;
    Cylinder[cylinderCount] cylinders;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

// Contains all information pertaining to a ray/object intersection
struct HitInfo {
    bool hit;
    float t;
    vec3 position;
    vec3 normal;
    Material material;
};

HitInfo getEmptyHit() {
	return HitInfo(
      	false, 
      	0.0, 
      	vec3(0.0), 
      	vec3(0.0), 
#ifdef SOLUTION_MATERIAL
		// Update the constructor call
		Material(vec3(0.0), vec3(0.0), 0.0, 0.0, 0.0 ,0.0)
#else
		Material(vec3(0.0), vec3(0.0), 0.0, 0.0, 0.0 ,0.0)
#endif
	);
}

// Sorts the two t values such that t1 is smaller than t2
void sortT(inout float t1, inout float t2) {
  	// Make t1 the smaller t
    if (t2 < t1) {
		float temp = t1;
		t1 = t2;
		t2 = temp;
    }
}

// Tests if t is in an interval
bool isTInInterval(const float t, const float tMin, const float tMax) {
	return t > tMin && t < tMax;
}

// Get the smallest t in an interval
bool getSmallestTInInterval(float t0, float t1, const float tMin, const float tMax, inout float smallestTInInterval) {
	sortT(t0, t1);
	// As t0 is smaller, test this first
	if (isTInInterval(t0, tMin, tMax)) {
		smallestTInInterval = t0;
        return true;
	}
  
	// If t0 was not in the interval, still t1 could be
	if (isTInInterval(t1, tMin, tMax)) {
		smallestTInInterval = t1;
		return true;
	}  
	// None was
	return false;
}

HitInfo intersectSphere(const Ray ray, const Sphere sphere, const float tMin, const float tMax) {
              
    vec3 to_sphere = ray.origin - sphere.position;
 
    float a = dot(ray.direction, ray.direction);
	float b = 2.0 * dot(ray.direction, to_sphere);
    float c = dot(to_sphere, to_sphere) - sphere.radius * sphere.radius;
    float D = b * b - 4.0 * a * c;
    if (D > 0.0)
    {
		float t0 = (-b - sqrt(D)) / (2.0 * a);
		float t1 = (-b + sqrt(D)) / (2.0 * a);
      
      	float smallestTInInterval;
      	if (!getSmallestTInInterval(t0, t1, tMin, tMax, smallestTInInterval)) {
			return getEmptyHit();
        }
      
      	vec3 hitPosition = ray.origin + smallestTInInterval * ray.direction;      

      	vec3 normal = 
			length(ray.origin - sphere.position) < sphere.radius + 0.001 ? 
          	-normalize(hitPosition - sphere.position) : 
      		normalize(hitPosition - sphere.position);      

        return HitInfo(
          	true,
          	smallestTInInterval,
          	hitPosition,
          	normal,
          	sphere.material
        );
    }
    return getEmptyHit();
}

HitInfo intersectPlane(const Ray ray,const Plane plane, const float tMin, const float tMax) {
#ifdef SOLUTION_CYLINDER_AND_PLANE
	// First of all , we have to make sure that the normal of this plane is not pe
   if (dot(ray.direction,plane.normal) != 0.0){ //have to make sure that this ray is not parellel to the plane
	   // The function of the plane can be expressed as [Normal vector * P + d =0]. Replace P by the ray equation R.origin + t * Raydiretion=0, solve for t:
	   float t=(-plane.d-dot(ray.origin,plane.normal))/dot(plane.normal,ray.direction);
	   // The hitposition is the intersection point of the ray and the plane.
	   vec3 hitPosition = ray.origin + t * ray.direction;
	   
	   // Check if the incident light is opposite to the normal direction of the plane because the nprmal of the plane should face to the view camera. If the angle between the incident light and the normal is an acute angle, the cos value will be positive and the normal of the plane is not facing the view camera.Therefore, when the cosine of the incident light and the normal is positive, we change the direction of the normal to the opposite direction of the original direction.
	   
		float CosNormalAndRay = dot(plane.normal,normalize(hitPosition-ray.origin));// the direction of incidnet light is calculated as 'normalize(hitPosition-ray.origin)'
		vec3 normal = CosNormalAndRay > 0.0 ? -plane.normal:plane.normal;
	   
	   //Checkt if T is the interval between tMin and tMax, which is further used in shadow test.(because we have only one t for plane intersection so we dont call the function 'smallestTInInterval' which contain two 'isTInInterval'  in its structure.)
      if (isTInInterval(t, tMin, tMax)){
		  return HitInfo(
        true,
        t,
        hitPosition,
        normal,
        plane.material
        );	
      }
    return getEmptyHit();
  }
	return getEmptyHit();
#endif  
    return getEmptyHit();
}

float lengthSquared(vec3 x) {
	return dot(x, x);
}

HitInfo intersectCylinder(const Ray ray, const Cylinder cylinder, const float tMin, const float tMax) {
#ifdef SOLUTION_CYLINDER_AND_PLANE
	// Assuming that the intersection point of the ray and the cylinder is Pt(which is on the surface of the cylinder).According to the spatial geometric relationship, the length of the cross product between the vector [cylinder center to Pt] and the cylinder direction is equal to the radius of the cylinder.And the direction of the crossproduct result is vertical to plane constructed by vector cylinder direction and O_Pt.
	//Express this relationship in equation, we will have:[((Pt-cylinder.position).crossproduct.cylinder direction)^2 = cylinder.radius^2],replace Pt with ray funtion and solve for T, we can have a Quadratic equation : 
	// CD:cylinder direciton.  RD: Ray direction  to_cylinder : defined as below
		vec3 to_cylinder=ray.origin-cylinder.position;
	//(CD.crossproduct.RD)^2 * t^2 - 2*(CD.crossproduct.RD)*(CD.crossproduct.to_cylinder) + (CD.crossproduct.to_cylinder)^2 - cylinder.radius ^2 = 0. The length of a vector is calculated used to pre-defined function 'lengthSquared '

	float a=lengthSquared(cross(cylinder.direction,ray.direction));
	float b=2.0*dot(cross(cylinder.direction,ray.direction),cross(cylinder.direction,to_cylinder));
	float c=lengthSquared(cross(cylinder.direction,to_cylinder))-cylinder.radius*cylinder.radius; 
	float D = b * b - 4.0 * a * c;
	// Only if the Discriminate is larger than 0, the ray intersect with the cylinder.
	    if (D > 0.0)
    { // solve for T
		float t0 = (-b - sqrt(D)) / (2.0 * a);
		float t1 = (-b + sqrt(D)) / (2.0 * a);
      // we choose the smaller T because this position is the actual position where the ray intersect with the cylinder,call pre-defined function'smallestTInInterval'
      	float smallestTInInterval;
      	if (!getSmallestTInInterval(t0, t1, tMin, tMax, smallestTInInterval)) {
			return getEmptyHit();
        }
      // The hitposition is the intersection point of the ray and the cylinder.
      	vec3 hitPosition = ray.origin + smallestTInInterval * ray.direction;  
		
		// The normal of cylinder is actually the normal of the cylinder center line which goes through Pt.Assume that KP is the vector which is perpendicular to the center line,point K can be represent as [O.position + OP * cos(KOP)],where O is the center of cylinde	
       vec3 normalvectorPoint_K=cylinder.position+dot(hitPosition-cylinder.position,cylinder.direction)*cylinder.direction;
		
      //'Distance' defines the distance from the ray origin to the cylinder's centre line	
		float Distance = length(cross(to_cylinder,cylinder.direction)); 
		// if the Distance from the ray origin to the cylinder's centre line is smaller than the radius of the cylinder, that means the ray origin is inside the cylinder,so the normal should be the opposite direction because the normal of the intersection surface should always facing the camera(in some occasion like refraction, the normal should actually face the origin of the view ray.)
		vec3 normal = Distance < cylinder.radius + 0.001 ? -normalize(hitPosition-normalvectorPoint_K):normalize(hitPosition-normalvectorPoint_K);
        return HitInfo(
          	true,
          	smallestTInInterval,
          	hitPosition,
          	normal,
          	cylinder.material
        );
    }
#endif  
    return getEmptyHit();
}

HitInfo getBetterHitInfo(const HitInfo oldHitInfo, const HitInfo newHitInfo) {
	if(newHitInfo.hit)
  		if(newHitInfo.t < oldHitInfo.t)  // No need to test for the interval, this has to be done per-primitive
          return newHitInfo;
  	return oldHitInfo;
}

HitInfo intersectScene(const Scene scene, const Ray ray, const float tMin, const float tMax) {
	HitInfo bestHitInfo;
	bestHitInfo.t = tMax;
	bestHitInfo.hit = false;
	for (int i = 0; i < cylinderCount; ++i) {
    	bestHitInfo = getBetterHitInfo(bestHitInfo, intersectCylinder(ray, scene.cylinders[i], tMin, tMax));
	}
	for (int i = 0; i < sphereCount; ++i) {
		bestHitInfo = getBetterHitInfo(bestHitInfo, intersectSphere(ray, scene.spheres[i], tMin, tMax));
	}
	for (int i = 0; i < planeCount; ++i) {
		bestHitInfo = getBetterHitInfo(bestHitInfo, intersectPlane(ray, scene.planes[i], tMin, tMax));
	}
  
	return bestHitInfo;
}

vec3 shadeFromLight(
	const Scene scene,
	const Ray ray,
	const HitInfo hit_info,
	const PointLight light)
{ 
	vec3 hitToLight = light.position - hit_info.position;
  
	vec3 lightDirection = normalize(hitToLight);
	vec3 viewDirection = normalize(hit_info.position - ray.origin);
	vec3 reflectedDirection = reflect(viewDirection, hit_info.normal);
	float diffuse_term = max(0.0, dot(lightDirection, hit_info.normal));
	float specular_term  = pow(max(0.0, dot(lightDirection, reflectedDirection)), hit_info.material.glossiness);

#ifdef SOLUTION_SHADOW
	//Chao's shadow detecting
	// When we are doing ray tracing, the ray can start from our camera and finally reach the light source.when there is intersesction of objects between the light source and the hitpoint, the camera won't be able to receive light intensity from the light source, which cause shadow. 
	Ray ray_to_light;// define a ray that start from the intersect position to the light source
	ray_to_light.origin =hit_info.position;
	ray_to_light.direction = lightDirection;
	float T_max = length(hitToLight);
	HitInfo shadingHitInfo=intersectScene(scene,ray_to_light,0.001,T_max);
	// we make a judgement to check whether the ray can start from hitpoint and finally reach the light source. If t equals to T_max, the ray_to_light represent vector start from hitpoint and ends at the light source.If t is smaller than T_max,then this vector ends somewhere between the hitpoint and light source, which indicated that there is an object intersection.In this case, because no light is received by the camera, we set the visibility to be zero.
	//typical error : Here is a small bug that if there is a object with transparency between the light source and the intersection point,this algorithm(or so call structure) will also wrongly set the visibility to be 0.Transparent object should not cause shadow, it should only refract the light.
	if(shadingHitInfo.t < T_max){
		float visibility = 0.0; 
		
		return visibility * 
		 light.color * (
		 specular_term * hit_info.material.specular +
		 diffuse_term * hit_info.material.diffuse);
	}
	float visibility = 1.0;
#else
  	float visibility = 1.0;
#endif  
	Ray mirrorRay;
	mirrorRay.origin = hit_info.position;
	mirrorRay.direction = reflect(lightDirection, hit_info.normal);
	HitInfo mirrorHitInfo = intersectScene(scene, mirrorRay, 0.001, 100000.0);
     
  return visibility * 
		 light.color * (
		 specular_term * hit_info.material.specular +
		 diffuse_term * hit_info.material.diffuse);
}

vec3 background(const Ray ray) {
	// A simple implicit sky that can be used for the background
	return vec3(0.2) + vec3(0.8, 0.6, 0.5) * max(0.0, ray.direction.y);
}

// It seems to be a WebGL issue that the third parameter needs to be inout instea dof const on Tobias' machine
vec3 shade(const Scene scene, const Ray ray, inout HitInfo hitInfo) {

  	if(!hitInfo.hit) {
		return background(ray);
  	}
  
    vec3 shading = scene.ambient * hitInfo.material.diffuse;
    for (int i = 0; i < lightCount; ++i) {
		shading += shadeFromLight(scene, ray, hitInfo, scene.lights[i]); 
    }
    return shading;
}


Ray getFragCoordRay(const vec2 frag_coord) {
	float sensorDistance = 1.0;
  	vec2 sensorMin = vec2(-1, -0.5);
  	vec2 sensorMax = vec2(1, 0.5);
  	vec2 pixelSize = (sensorMax- sensorMin) / vec2(800, 400);
  	vec3 origin = vec3(0, 0, sensorDistance);
   vec3 direction = normalize(vec3(sensorMin + pixelSize * frag_coord, -sensorDistance));  
  
  	return Ray(origin, direction);
}

float fresnel(const vec3 viewDirection, const vec3 normal) {
#ifdef SOLUTION_FRESNEL
	//According to some articles, the Fresnel effect means that the reflectivity of the surface is different when the object is viewed at different angles. The Fresnel effect simulates the effect of the material's reflectivity change as a function of angle. For example, when the glass ball is viewed at the edge, which means the angle between the incident and the surface is small, the reflection effect is stronger.When near the center of the glass ball, which means when the angle between the incident and the surface is nearly vertical, the glassball looks more transparent.
	// Schlick approximation is an algorithm used to approximate the Fresnel effect contribution.It is calculated as:
   // Schlick  Approximation:
	float R0 = 0.05;
   float FresnelTerm = R0 + (1.0 - R0) * pow((1.0 -dot(-viewDirection,normal)),2.0);
	//Actually tge R0 for Schlick approximation is calculated using Index of refraction ratio. This code furhter simplifed this approximation method and make R0 to be another parameter.
	
	// The other approximation method for Fresnel Approximation is called Ncidia experimental approximation.The Nvidia approximation of Fresnel equation is applied as below:
	//float _power = 2.0;
	//float bias = 0.55;
	//float scale = 0.5;
	//float FresnelTerm = max(0.0,min(1.0 ,bias + scale * pow(1.0 +dot(viewDirection,normal),_power)));
	return FresnelTerm;
#else
	return 1.0;
#endif
}

vec3 colorForFragment(const Scene scene, const vec2 fragCoord) {
      
   Ray initialRay = getFragCoordRay(fragCoord);  
  	HitInfo initialHitInfo = intersectScene(scene, initialRay, 0.001, 10000.0);  
  	vec3 result = shade(scene, initialRay, initialHitInfo);
	
  	Ray currentRay;
  	HitInfo currentHitInfo;
  	
  	// Compute the reflection
  	currentRay = initialRay;
  	currentHitInfo = initialHitInfo;
  	
  	// The initial strength of the reflection
  	float reflectionWeight = 1.0;
  	
  	const int maxReflectionStepCount = 3;
  	for (int i = 0; i < maxReflectionStepCount; i++) {
		if (!currentHitInfo.hit) break;      
#ifdef SOLUTION_REFLECTION  
		// get the materials reflectionWeight.The next reflection must be weaker than the previous one so the reflectionweight will decrese every loop
		reflectionWeight *= currentHitInfo.material.reflection;
		// If hit something that has not reflectionweight, break the loop the increase the efficiency.(Further calculation is meaningless)
		if(reflectionWeight == 0.0) break;
#endif
      
#ifdef SOLUTION_FRESNEL
		// Apply Fresnel contribution
		reflectionWeight = reflectionWeight * fresnel(currentRay.direction, currentHitInfo.normal);
#else
		reflectionWeight *= 0.5;
#endif
      
		Ray nextRay;
#ifdef SOLUTION_REFLECTION
		// Put your code to compute the reflection ray here
		nextRay.origin = currentHitInfo.position;
	   nextRay.direction = reflect(currentRay.direction, currentHitInfo.normal);
		// The following equation is used to calculate the reflection direciton 
		//nextRay.direction = currentRay.direction + 2.0 * dot(-currentHitInfo.normal,currentRay.direction) * currentHitInfo.normal;
#endif
		// Get the direction and position for next ray.At the end of each loop, the light intensity of the i+1 th loop is added. When the programme loops n times, the light contribution of n+1 times is actually calculated.
		currentRay = nextRay; 
		currentHitInfo = intersectScene(scene, currentRay, 0.001, 10000.0); 
		result += reflectionWeight * shade(scene, currentRay, currentHitInfo);

    }
  
	// Compute the refraction
	currentRay = initialRay;  
	currentHitInfo = initialHitInfo;
   
  	// The initial medium is air
  	float currentIOR = 1.0;

  	// The initial strength of the refraction.
  	float refractionWeight = 1.0;
  
  	const int maxRefractionStepCount = 2;
  	for(int i = 0; i < maxRefractionStepCount; i++) {
      
#ifdef SOLUTION_REFRACTION
		// Put your refraction weighting code here 
		// get the materials refractionWeight.The next refraction must be weaker than the previous one so the reflectionweight will decrese every loop
		refractionWeight *= currentHitInfo.material.refraction;
		if(refractionWeight == 0.0) break;
#else
		refractionWeight *= 0.5;      
#endif

#ifdef SOLUTION_FRESNEL
		refractionWeight = refractionWeight * (1.0 - fresnel(currentRay.direction, currentHitInfo.normal));
#endif      
		Ray nextRay;
#ifdef SOLUTION_REFRACTION      
		// Put your code to compute the reflection ray and track the IOR
		//The starting point of the next ray of refraction is the intersection of the previous ray and object
		nextRay.origin = currentHitInfo.position ;
		//When light enters different media, the IOR of the media is different. According to the snell law, the sine ratio of the refraction angle equals to 1 divided by the IOR ratio of the medium.
		float previousIOR = currentIOR;
		currentIOR = currentHitInfo.material.IOR;
		// If the ray goes from the inside of object to the air, then the material should be air rather than object
		if (i == 1){ currentIOR = 1.0 ;}
		// return the IOR of air. because the even times intersection are always the ocasion that the ray is going out from the object
		float IORratio = currentIOR / previousIOR; 
		float inversed_RIOR = 1.0 / IORratio;
		
		nextRay.direction = refract(currentRay.direction,currentHitInfo.normal,inversed_RIOR);
		
		// Only use these variables when using self-defined refraction direction.
		
		//float cosIncident = dot(-currentRay.direction,currentHitInfo.normal);
		//float k = 1.0 + IORratio * IORratio * (cosIncident * cosIncident - 1.0);
		//if ( k < 0.0 ) {break ;}
	   //nextRay.direction = - IORratio * currentRay.direction + currentHitInfo.normal * (IORratio * cosIncident - sqrt(k));
		currentRay = nextRay; 
#endif
		currentHitInfo = intersectScene(scene, currentRay, 0.001, 10000.0);   
		result += refractionWeight * shade(scene, currentRay, currentHitInfo);
      
		if (!currentHitInfo.hit) break;
	}
	return result;
}

Material getDefaultMaterial() {
#ifdef SOLUTION_MATERIAL
	// Update the default material call to match the new parameters of Material
	return Material(vec3(0.3), vec3(0), 1.0, 0.0, 0.0 ,0.0);
#else
	return Material(vec3(0.3), vec3(0), 1.0);
#endif
}

// for different material, you have diferent reflectionweight. Usually, you will consider a material with higher glossiness and specular term will habe higher reflectionweight.
Material getPaperMaterial() {
#ifdef SOLUTION_MATERIAL
	// According to our daily experience,the rough surface of paper leads to lower specular and shiness value and higher diffuse value.For reflection, our engineering tuition tells us that paper never reflect things so the reflection weight is 0.0.
	//Note:Because there is a pre-defined ambient light in the code, the color fir the diffuse component will be slightly different from the RGB color
    return Material(vec3(1.0),vec3(0.0,0.0,0.0),10.0, 0.0, 0.0 ,0.0);
#else
    return getDefaultMaterial();
#endif
}

Material getPlasticMaterial() {
#ifdef SOLUTION_MATERIAL
	// Replace by your definition of a plastic material
	//For those plastic that has matt coating ,as the one shown in the course work example,the diffuse value follow the RGB value of orange and specular term is relatively high so as to reflect stronger light.The shinness of plastic is low because the reflection is quite diverngent in the coursework sample.   
  	return Material(vec3(0.955,0.331,0.085),vec3(0.7),5.0, 0.6,0.0,0.0);
#else
  	return getDefaultMaterial();
#endif
}

Material getGlassMaterial() {
#ifdef SOLUTION_MATERIAL
// Glass has not diffuse and specular weight so it looks like a black hole before having reflection and reflection.The reflectionweight and refraction weight are  1.0 and 0.9 because we consider it as a nearly perfect glass(reflect all light and allow all light to go through so as to make it similar to the coursework sample.)
// The energy conservation that requires reflectionweight + refractionweight =1 is controlled by the Fresnel Effect.
	return Material(vec3(0.0),vec3(0.0),5.0, 1.0, 0.9, 1.04);
#else
	return getDefaultMaterial();
#endif
}

Material getSteelMirrorMaterial() {
#ifdef SOLUTION_MATERIAL
// Mirror steel reflect most of the light with a little bit loss.So the reflectionweight is set to be 0.7
	return Material(vec3(0.08),vec3(0.2),30.0, 0.7, 0.0 ,0.0);
#else
	return getDefaultMaterial();
#endif
}

vec3 tonemap(const vec3 radiance) {
	const float monitorGamma = 2.0;
	return pow(radiance, vec3(1.0 / monitorGamma));
}

void main()
{
    // Setup scene
	Scene scene;
  	scene.ambient = vec3(0.12, 0.15, 0.2);
  
    // Lights
    scene.lights[0].position = vec3(5, 15, -5);
    scene.lights[0].color    = 0.5 * vec3(0.9, 0.5, 0.1);
    
  	scene.lights[1].position = vec3(-15, 5, 2);
    scene.lights[1].color    = 0.5 * vec3(0.1, 0.3, 1.0);
  
    // Primitives
    scene.spheres[0].position            	= vec3(10, -5, -16);
    scene.spheres[0].radius              	= 6.0;
    scene.spheres[0].material 				= getPaperMaterial();
    
  	scene.spheres[1].position            	= vec3(-7, -1, -13);
    scene.spheres[1].radius             	= 4.0;
    scene.spheres[1].material				= getPlasticMaterial();
  
    scene.spheres[2].position            	= vec3(0, 0.5, -5);
    scene.spheres[2].radius              	= 2.0;
    scene.spheres[2].material   			= getGlassMaterial();

  	scene.planes[0].normal            		= vec3(0, 1, 0);
  	scene.planes[0].d              			= 4.5;
    scene.planes[0].material				= getSteelMirrorMaterial();
  
  	scene.cylinders[0].position            	= vec3(-1, 1, -18);
  	scene.cylinders[0].direction            = normalize(vec3(-1, 2, -1));
  	scene.cylinders[0].radius         		= 1.5;
    scene.cylinders[0].material				= getPaperMaterial();
  
  	scene.cylinders[1].position            	= vec3(4, 1, -5);
  	scene.cylinders[1].direction            = normalize(vec3(1, 4, 1));
  	scene.cylinders[1].radius         		= 0.4;
    scene.cylinders[1].material				= getPlasticMaterial();

	// compute color for fragment
	gl_FragColor.rgb = tonemap(colorForFragment(scene, gl_FragCoord.xy));
	gl_FragColor.a = 1.0;

}
`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	UI.tabs.push(
		{
		visible: false,
		type: `x-shader/x-vertex`,
		title: `RaytracingDemoVS - GL`,
		id: `RaytracingDemoVS`,
		initialValue: `attribute vec3 position;
    uniform mat4 modelViewMatrix;
    uniform mat4 projectionMatrix;
  
    void main(void) {
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
`,
		description: ``,
		wrapFunctionStart: ``,
		wrapFunctionEnd: ``
	});

	 return UI; 
}//!setup

var gl;
function initGL(canvas) {
	try {
		gl = canvas.getContext("experimental-webgl");
		gl.viewportWidth = canvas.width;
		gl.viewportHeight = canvas.height;
	} catch (e) {
	}
	if (!gl) {
		alert("Could not initialise WebGL, sorry :-(");
	}
}

function getShader(gl, id) {
	var shaderScript = document.getElementById(id);
	if (!shaderScript) {
		return null;
	}

	var str = "";
	var k = shaderScript.firstChild;
	while (k) {
		if (k.nodeType == 3) {
			str += k.textContent;
		}
		k = k.nextSibling;
	}

	var shader;
	if (shaderScript.type == "x-shader/x-fragment") {
		shader = gl.createShader(gl.FRAGMENT_SHADER);
	} else if (shaderScript.type == "x-shader/x-vertex") {
		shader = gl.createShader(gl.VERTEX_SHADER);
	} else {
		return null;
	}

    console.log(str);
	gl.shaderSource(shader, str);
	gl.compileShader(shader);

	if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
		alert(gl.getShaderInfoLog(shader));
		return null;
	}

	return shader;
}

function RaytracingDemo() {
}

RaytracingDemo.prototype.initShaders = function() {

	this.shaderProgram = gl.createProgram();

	gl.attachShader(this.shaderProgram, getShader(gl, "RaytracingDemoVS"));
	gl.attachShader(this.shaderProgram, getShader(gl, "RaytracingDemoFS"));
	gl.linkProgram(this.shaderProgram);

	if (!gl.getProgramParameter(this.shaderProgram, gl.LINK_STATUS)) {
		alert("Could not initialise shaders");
	}

	gl.useProgram(this.shaderProgram);

	this.shaderProgram.vertexPositionAttribute = gl.getAttribLocation(this.shaderProgram, "position");
	gl.enableVertexAttribArray(this.shaderProgram.vertexPositionAttribute);

	this.shaderProgram.projectionMatrixUniform = gl.getUniformLocation(this.shaderProgram, "projectionMatrix");
	this.shaderProgram.modelviewMatrixUniform = gl.getUniformLocation(this.shaderProgram, "modelViewMatrix");
}

RaytracingDemo.prototype.initBuffers = function() {
	this.triangleVertexPositionBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
	
	var vertices = [
		 -1,  -1,  0,
		 -1,  1,  0,
		 1,  1,  0,

		 -1,  -1,  0,
		 1,  -1,  0,
		 1,  1,  0,
	 ];
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
	this.triangleVertexPositionBuffer.itemSize = 3;
	this.triangleVertexPositionBuffer.numItems = 3 * 2;
}

function getTime() {
	var d = new Date();
	return d.getMinutes() * 60.0 + d.getSeconds() + d.getMilliseconds() / 1000.0;
}

RaytracingDemo.prototype.drawScene = function() {
			
	var perspectiveMatrix = new J3DIMatrix4();	
	perspectiveMatrix.setUniform(gl, this.shaderProgram.projectionMatrixUniform, false);

	var modelViewMatrix = new J3DIMatrix4();	
	modelViewMatrix.setUniform(gl, this.shaderProgram.modelviewMatrixUniform, false);

	gl.uniform1f(gl.getUniformLocation(this.shaderProgram, "time"), getTime());
		
	gl.bindBuffer(gl.ARRAY_BUFFER, this.triangleVertexPositionBuffer);
	gl.vertexAttribPointer(this.shaderProgram.vertexPositionAttribute, this.triangleVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);
	
	gl.drawArrays(gl.TRIANGLES, 0, this.triangleVertexPositionBuffer.numItems);
}

RaytracingDemo.prototype.run = function() {
	this.initShaders();
	this.initBuffers();

	gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
	gl.clear(gl.COLOR_BUFFER_BIT);

	this.drawScene();
};

function init() {	
	

	env = new RaytracingDemo();	
	env.run();

    return env;
}

function compute(canvas)
{
    env.initShaders();
    env.initBuffers();

    gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
    gl.clear(gl.COLOR_BUFFER_BIT);

    env.drawScene();
}
